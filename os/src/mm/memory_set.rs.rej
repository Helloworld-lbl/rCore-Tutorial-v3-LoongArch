diff a/os/src/mm/memory_set.rs b/os/src/mm/memory_set.rs	(rejected hunks)
@@ -1,16 +1,17 @@
 //! Implementation of [`MapArea`] and [`MemorySet`].
-use super::{frame_alloc, FrameTracker};
-use super::{PTEFlags, PageTable, PageTableEntry};
+
+use super::{frame_alloc, FrameTracker, PageTableEntry};
+use super::{PTEFlags, PageTable};
 use super::{PhysAddr, PhysPageNum, VirtAddr, VirtPageNum};
 use super::{StepByOne, VPNRange};
-use crate::config::{MEMORY_END, MMIO, PAGE_SIZE, TRAMPOLINE, TRAP_CONTEXT, USER_STACK_SIZE};
+use crate::config::{MEMORY_END, MMIO, PAGE_SIZE, TRAMPOLINE, USER_STACK_SIZE};
 use crate::sync::UPSafeCell;
 use alloc::collections::BTreeMap;
 use alloc::sync::Arc;
 use alloc::vec::Vec;
 use core::arch::asm;
 use lazy_static::*;
-use riscv::register::satp;
+use loongarch::register::{crmd, pgdh, pgdl};
 
 extern "C" {
     fn stext();
@@ -30,10 +31,17 @@ lazy_static! {
     pub static ref KERNEL_SPACE: Arc<UPSafeCell<MemorySet>> =
         Arc::new(unsafe { UPSafeCell::new(MemorySet::new_kernel()) });
 }
+
 ///Get kernelspace root ppn
 pub fn kernel_token() -> usize {
     KERNEL_SPACE.exclusive_access().token()
 }
+
+lazy_static! {
+    pub static ref TRAMPOLINE_SPACE: Arc<UPSafeCell<MemorySet>> = 
+        Arc::new(unsafe { UPSafeCell::new(MemorySet::new_trampoline()) });
+}
+
 /// memory set structure, controls virtual-memory space
 pub struct MemorySet {
     page_table: PageTable,
@@ -41,14 +49,12 @@ pub struct MemorySet {
 }
 
 impl MemorySet {
-    ///Create an empty `MemorySet`
     pub fn new_bare() -> Self {
         Self {
             page_table: PageTable::new(),
             areas: Vec::new(),
         }
     }
-    ///Get pagetable `root_ppn`
     pub fn token(&self) -> usize {
         self.page_table.token()
     }
@@ -236,11 +220,18 @@ impl MemorySet {
             elf.header.pt2.entry_point() as usize,
         )
     }
+    pub fn new_trampoline() -> Self {
+        let mut memory_set = Self::new_bare();
+        memory_set.page_table.map(
+            VirtAddr::from(TRAMPOLINE).into(),
+            PhysAddr::from(strampoline as usize).into(),
+            PTEFlags::from_bits(0).unwrap(),
+        );
+        memory_set
+    }
     ///Clone a same `MemorySet`
-    pub fn from_existed_user(user_space: &MemorySet) -> MemorySet {
+    pub fn from_existed_user(user_space: &Self) -> Self {
         let mut memory_set = Self::new_bare();
-        // map trampoline
-        memory_set.map_trampoline();
         // copy data sections/trap_context/user_stack
         for area in user_space.areas.iter() {
             let new_area = MapArea::from_another(area);
@@ -256,12 +247,20 @@ impl MemorySet {
         }
         memory_set
     }
-    ///Refresh TLB with `sfence.vma`
     pub fn activate(&self) {
-        let satp = self.page_table.token();
         unsafe {
-            satp::write(satp);
-            asm!("sfence.vma");
+            let root_pa: PhysAddr = self.page_table.token().into();
+            pgdl::write_pa_to_pgdl(root_pa.into());
+            let mut crmd = crmd::read();
+            crmd.enable_pg();
+            asm!("invtlb 0x0, $r0, $r0");
+        }
+    }
+    pub fn activate_trampoline(&self) {
+        unsafe {
+            let root_pa: PhysAddr = self.page_table.token().into();
+            pgdh::write_pa_to_pgdh(root_pa.into());
+            asm!("invtlb 0x0, $r0, $r0");
         }
     }
     ///Translate throuth pagetable
@@ -370,15 +369,13 @@ pub enum MapType {
 
 bitflags! {
     /// map permission corresponding to that in pte: `R W X U`
-    pub struct MapPermission: u8 {
-        ///Readable
-        const R = 1 << 1;
-        ///Writable
-        const W = 1 << 2;
-        ///Excutable
-        const X = 1 << 3;
-        ///Accessible in U mode
-        const U = 1 << 4;
+    pub struct MapPermission: u64 {
+        const D = 1 << 1;
+        const PLV_L = 1 << 2;
+        const PLV_H = 1 << 3;
+        const W = 1 << 8;
+        const NR = 1 << 61;
+        const NX = 1 << 62;
     }
 }
 
